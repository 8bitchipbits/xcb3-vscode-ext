{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "XC-BASIC3",
	"patterns": [
		{
			"include": "#options"
		},
        {
			"include": "#asm-expression"
		},
		{
			"include": "#invalid"
		},
		{
			"include": "#types"
		},
		{
			"include": "#interrupts"
		},
		{
			"include": "#charset"
		},
		{
			"include": "#vmode"
		},
        {
            "include": "#voice"
        },
        {
            "include": "#filter"
        },
        {
            "include": "#sprite"
        },
        {
			"include": "#keywords"
		},
		{
			"include": "#modifiers"
		},
        {
			"include": "#operators"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numerics"
		},
		{
			"include": "#hexanumerics"
		},
		{
			"include": "#type"
		},
		{
			"include": "#sub"
		},
		{
			"include": "#call"
		},
		{
			"include": "#as"
		},
		{
			"include": "#labels"
		}
	],
	"repository": {
		"options": {
			"patterns": [{
				"name": "keyword.control.xcbasic3",
				"match": "(?i)\\bOPTION\\s+(FASTINTERRUPT|INLINEDATA|NOBASICLOADER|STARTADDRESS|TARGET)\\b",
				"captures": {
					"1": {
						"name": "variable.name.xcbasic3"
					}
                }
            }]
		},
        "asm-expression": {
			"begin": "(?i)\\basm\\b",
			"end": "(?i)\\bend asm\\b",
			"name": "keyword.control.xcbasic3",
			"patterns": [
				{
					"include": "#asm-comments"
				},
				{
					"include": "#asm-constants"
				},
				{
					"include": "#asm-labels"
				},
				{
					"include": "#asm-operators"
				},
				{
					"include": "#asm-pseudoops"
				},
				{
					"include": "#asm-instructions"
				},
				{
					"include": "#asm-registers"
				}
			]
		},
		"type": {
			"patterns": [{
				"name": "keyword.control.xcbasic3",
				"match": "(?i)type\\s+([a-z_][a-z_0-9]*\\$?)",
				"captures": {
					"1": {
						"name": "entity.name.type.xcbasic3"
					}
				}
			}]
		},
		"as": {
			"patterns": [{
				"name": "keyword.control.xcbasic3",
				"match": "(?i)\\bas\\s+([a-z_][a-z_0-9]*\\$?)\\b",
				"captures": {
					"1": {
						"name": "entity.name.type.xcbasic3"
					}
				}
			}]
		},
		"types": {
			"patterns": [{
				"name": "entity.name.type.xcbasic3",
				"match": "(?i)\\b(byte|word|int|long|float|decimal|string)\\b"
			}]
		},
		"sub": {
			"patterns": [{
				"name": "keyword.control.xcbasic3",
				"match": "(?i)\\b(?:sub|function)\\s+([a-z_][a-z_0-9]*\\$?)\\b",
				"captures": {
					"1": {
						"name": "entity.name.function.xcbasic3"
					}
				}
			}]
		},
		"interrupts": {
			"patterns": [{
				"name": "keyword.control.xcbasic3",
				"match": "(?i)\\b(?:timer|raster|sprite|background|system)\\s+interrupt\\s+(on|off)\\b",
				"captures": {
					"1": {
						"name": "constant.numeric.xcbasic3"
					}
                }
            }, {
                "name": "keyword.control.xcbasic3",
                "match": "(?i)\\bon\\s+(?:timer|raster|sprite|background)"
            }]
		},
        "charset": {
			"patterns": [{
				"name": "storage.modifier.xcbasic3",
				"match": "(?i)\\bcharset(?:\\s+(ram|rom))?\\b",
				"captures": {
					"1": {
						"name": "constant.numeric.xcbasic3"
					}
                }
            }]
		},
        "vmode": {
			"patterns": [{
				"name": "storage.modifier.xcbasic3",
                "match": "(?i)\\bvmode\\s+(((?:text|bitmap)\\s+(?:hires|multi))|ext)\\b",
				"captures": {
					"1": {
						"name": "constant.numeric.xcbasic3"
					}
                }
            }]
		},
        "voice": {
			"patterns": [
                {
                    "name": "storage.modifier.xcbasic3",
                    "match": "(?i)(?:voice|on|off|left|right|volume|tone|adsr|pulse|filter\\s(on|off))\\b",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.xcbasic3"
                        }
                    }
                },{
                    "name": "storage.modifier.xcbasic3",
                    "match": "(?i)\\bwave\\s(saw|pulse|noise|tri)\\b",
                    "captures": {
                        "1": {
                            "name": "constant.numeric.xcbasic3"
                        }
                    }
                }
            ]
		},
        "filter": {
            "patterns": [{
                "name": "storage.modifier.xcbasic3",
                "match": "(?i)\\b(?:filter|cutoff|resonance|(low|band|high)\\spass)\\b",
                "captures": {
                    "1": {
                        "name": "constant.numeric.xcbasic3"
                    }
                }
            }]
        },
        "sprite": {
            "patterns": [{
                "name": "storage.modifier.xcbasic3",
                "match": "(?i)\\b(?:sprite|on|off|at|shape|color|hires|multi|hicol|lowcol|xysize|(on|under)\\s+background|zdepth|xyflip)\\b",
                "captures": {
                    "1": {
                        "name": "constant.numeric.xcbasic3"
                    }
                }
            }]
        },
        "call": {
			"patterns": [{
				"name": "storage.modifier.xcbasic3",
				"match": "(?i)\\bcall\\s+([a-z_][a-z_0-9]*\\$?)\\b",
				"captures": {
					"1": {
						"name": "entity.name.function.xcbasic3"
					}
				}
			}]
		},
		"comments": {
			"patterns": [{
				"name": "comment.line.xcbasic3",
				"match": "(?i)(rem)(.*)"
			}, {
				"name": "comment.line.xcbasic3",
				"match": "(?i)(')(.*)"
			}]
		},
		"labels": {
			"patterns": [{
				"name": "variable.name.xcbasic3",
				"match": "(?i)\\b[a-z_][a-z_0-9]*\\$?\\b"
			}]
		},
		"numerics": {
			"patterns": [{
				"name": "constant.numeric.xcbasic3",
				"match": "\\b([0-9]+)\\b"
			}]
		},
		"hexanumerics": {
			"patterns": [{
				"name": "constant.numeric.xcbasic3",
				"match": "\\$([0-9a-fA-F]+)\\b"
			}]
		},
		"invalid": {
			"patterns": [{
				"name": "invalid.illegal",
				"match": "(?i)\\b(inline)\\b"
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.xcbasic3",
				"match": "(?i)\\b(case(\\s+(is|else))*|const|continue|data|declare|dim|do|else|end(\\s+(select|sub|type|function))?|error|exit\\s+(do|for|function|sub)|fast|for|gosub|goto|if|incbin|include|let|loop|next|origin|overload|private|return|select\\s+case|shared|static|step|sys|then|this|to|until|while)\\b"
			}]
		},
		"modifiers": {
			"patterns": [{
				"name": "storage.modifier.xcbasic3",
				"match": "(?i)\\b(abs|asc|at|atn|cbyte|cfloat|chr$|cint|clong|color|cos|csrlin|cword|deek|err|exp|int|lcase$|left$|len|log|mid$|peek|pos|pow|right$|rnd|rndb|rndi|rndl|rndw|sgn|shl|shr|sin|sqr|st|str$|swap|tan|ti|ucase$|val|wait)\\b"
			},{
				"name": "storage.modifier.xcbasic3",
				"match": "(?i)\\b(background|border|charat|close|cols|doke|get|hscroll|input|int|load|locate|memcpy|memset|memshift|open|poke|print|randomize|read|rows|save|screen|sound\\s+clear|sprite\\s+clear|sprite\\s+multicolor|textat|vscroll|write)\\b"
			}]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.xcbasic3",
				"match": "(?i)(\\*|\\bto\\b|/|\\+|-|@|=|<>|<|>|<=|>=|\\band\\b|\\bor\\b|\\bxor\\b|\\bnot\\b|\\bmod\\b)"
			}]
		},
		"strings": {
			"name": "string.quoted.double.xcbasic3",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.xcbasic3",
					"match": "\\\\."
				}
			]
		},
		"asm-labels": {
			"patterns": [
				{
					"name": "entity.name.function.dasm",
					"match": "^[a-zA-Z0-9_]+\\b\\s*[^=]",
					"comment": "Label"
				},
				{
					"name": "variable.name.dasm",
					"match": "\\b[a-zA-Z0-9_]+\\b",
					"comment": "Label"
				}
			]
		},
		"asm-pseudoops": {
			"patterns": [
				{
					"name": "keyword.directives.dasm",
					"match": "(?i)[\\s]*\\b(include|incdir|seg|seg\\.u|dc|dc\\.bwl|dv|dv\\.bwl|hex|org|rorg|rend|align|subroutine|equ|=|eqm|set|mac|endm|mexit|ifconst|ifnconst|if|else|endif|eif|repeat|repend|list\\s+on|list\\soff|processor)\\b"
				}
			]
		},
		"asm-instructions": {
			"patterns": [
				{
					"name": "keyword.instructions.dasm",
					"match": "(?i)[\\s]*\\b(adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya)\\b"
				}
			]
		},
		"asm-registers": {
			"patterns": [
				{
					"name": "keyword.registers.dasm",
					"match": "(?i)\\b(pc|ac|x|y|sr|sp)\\b"
				}
			]
		},
		"asm-comments": {
			"patterns": [
				{
					"name": "comment.line.dasm",
					"begin": ";",
					"end": "$",
					"comment": "Single line comment"
				}
			]
		},
		"asm-constants": {
			"patterns": [
				{
					"include": "#asm-constants-numeric"
				},
				{
					"include": "#asm-constants-string"
				}
			]
		},
		"asm-constants-numeric": {
			"patterns": [
				{
					"name": "constant.numeric.binary.dasm",
					"match": "\\%[0-1]+\\b",
					"comment": "Integer literal (binary)"
				},
				{
					"name": "constant.numeric.hexadecimal.dasm",
					"match": "\\$[0-9a-fA-F]+\\b",
					"comment": "Integer literal (hexa)"
				},
				{
					"name": "constant.numeric.octal.dasm",
					"match": "\\b0[0-7]+\\b",
					"comment": "Integer literal (octal)"
				},
				{
					"name": "constant.numeric.integer.decimal.dasm",
					"match": "\\b[0-9]+\\b",
					"comment": "Integer literal (decimal)"
				}
			]
		},
		"asm-constants-string": {
			"name": "string.quoted.double.dasm",
			"begin": "\"",
			"end": "\""
		},
		"asm-operators": {
			"patterns": [
				{
					"name": "keyword.operator.dasm",
					"match": "(?i)(\\*|\\/|%|\\+|-|<<|>>|>|>=|<|<=|==|=|!=|\\&|\\^|\\||\\&\\&|\\|\\||\\?|\\[|\\]|,)",
					"comment": "Binary operators"
				}
			]
		}
	},
	"scopeName": "source.xcbasic3"
}